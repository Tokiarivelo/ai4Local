Génère la page **Dashboard → Campaigns → Toutes les campagnes** pour AI4Local.  
Contraintes : code TypeScript strict, placer tous les fichiers sous `src/app/*`, respecter l’architecture et les conventions déjà définies pour la page Realtime (components modularisés, UI primitives, dark/light mode, mobile-first). Utilise Tailwind CSS et scripts Bun. Fourni uniquement TSX/TS + README + mocks + tests exemples.

EXIGENCES GÉNÉRALES

- Mobile-first, responsive (sm/md/lg/xl). Sidebar collapsible / drawer mobile.
- Dark & Light mode support (CSS variables + Tailwind `dark:`).
- Composants petits, testables, exportés, documentés.
- Accessibilité (ARIA, keyboard nav, focus).
- Skeletons + états empty/error.
- Virtualization pour listes longues (react-window ou équivalent).
- Tests unitaires examples (Jest + RTL).

FONCTIONNALITÉS CLÉS (détaillées)

1. `CampaignsLayout.tsx`
   - Wrapper page, breadcrumb "Dashboard / Campaigns", grid responsive.
2. `CampaignsPage.tsx`
   - Compose les modules : Toolbar, Filters, StatsCards, CampaignsList, RightPane (preview/details).
3. `CampaignFilters.tsx` (drawer)
   - Filtres : statut (Draft/Active/Scheduled/Paused/Archived/Failed), channel (FB/WhatsApp/IG), owner, tags, date range, search global. Debounce 300ms.
4. `CampaignsList.tsx`
   - Virtualized table/list. Colonnes: Checkbox, Name, Channel, Status, Start/End, Impressions, Clicks, Conversions, Owner, Actions. Sortable cols. Inline filters per column.
5. `CampaignRow.tsx`
   - Row détaillée : thumbnail/mock preview, A/B test badge, progress bar, KPI mini (impr/clicks/conversions), kebab menu (Edit / Duplicate / Pause / Resume / Archive / Delete). Accessible.
6. `CampaignEditorModal.tsx`
   - Modal pour créer/éditer campagne : form typé (title, channel, audience, creative, schedule, budget, UTM, template selection). Validation client-side. Support save draft / schedule / publish.
7. `CampaignQuickActions.tsx`
   - Bulk actions: Publish, Pause, Archive, Delete, Export CSV. Confirmation modals for destructive actions.
8. `CampaignTemplatesPanel.tsx`
   - Library of templates with preview + apply.
9. `ABTestManager.tsx`
   - Option pour créer A/B test variants, assign traffic split, track metric to win (CTR / Conversions). Simple UI to enable/disable tests.
10. `CampaignStatsCard.tsx`
    - KPI cards & miniature charts (sparkline) per campaign or global summary. Colors: primary series = --brand-mid, accent = --brand-light.

TYPES (types.ts)

- `Campaign { id:string; name:string; channel:'facebook'|'whatsapp'|'instagram'; status:'draft'|'active'|'scheduled'|'paused'|'archived'|'failed'; startAt?:string; endAt?:string; owner:string; impressions:number; clicks:number; conversions:number; budget?:number; tags?:string[]; abTest?: { enabled:boolean; variants: { id:string; name:string; pct:number }[] }; templateId?:string }`
- `FilterOptions`, `BulkAction`, etc.

INTERACTIONS & COMPORTEMENTS
-Sortable & searchable table.
-Row actions open CampaignEditorModal (edit) or quick confirm dialogs.
-Bulk select + actions with toast confirmations.
-Schedule picker with timezone handling.
-AB test creation + traffic split UI.
-Charts sparklines interactive (hover tooltip).
-Responsive: on mobile list collapses to card view with essential info and actions in kebab menu.
-Dark mode styling and chart color variants.

PERFORMANCE & QUALITÉ
-Virtualize lists.
-Memoize rows (React.memo).
-No any. Strong TS typing.
-Avoid inline anonymous functions in lists.
-Unit tests examples for CampaignRow and bulk actions.

DELIVERABLES
-Tous les fichiers TSX/TS listés ci-dessus.
-types.ts et mocks/campaigns.mock.ts (≥10 items).
-examples/CampaignsExample.tsx qui montre page montée avec mocks and mocked APIs.
-README.md expliquant intégration, props attendues, comment brancher API réelle, et comment activer dark mode.
-tests/CampaignRow.test.tsx sample.

BONNES PRATIQUES (rappel)
-Structure components/ui, components/modules/campaigns, components/layout.
-Naming clair (PascalCase).
-Single responsibility.
-Use context/provider for filters & selected rows.
-Exports index.ts pour chaque dossier.
-Commentaire en haut de chaque fichier résumant responsabilité.

---

Génère les 5 étapes interactives du flux de création de campagne pour AI4Local :

- Créatifs : Images, vidéos, textes, génération IA
- Audience : Ciblage et segments
- Planning : Budget et calendrier
- Tracking : UTM et A/B tests
- Validation : Vérification finale avant publication

Contexte :
Ce module appartient à la page `Dashboard > Campaigns > Create` située dans `app/modules/campaigns/create/cpmponents/wizard`.
Suivre strictement la même structure, typage, bonnes pratiques et code style que la page Realtime.

## 🧩 EXIGENCES GÉNÉRALES

- **UI Framework :** Next.js 15 + TypeScript + TailwindCSS + shadcn/ui.
- **Dark / Light Mode** complet (via CSS vars + classes `dark:`).
- **Mobile-first** responsive layout (sm, md, lg).
- **Utilisation de composants shadcn/ui** (Card, Tabs, Input, Button, Slider, Switch, Dialog, Select, Calendar, Avatar, Badge, Alert, etc.).
- **Typage fort** (`zod` + `react-hook-form` + `zodResolver`).
- **Architecture modulaire et réutilisable** (chaque étape = composant isolé et typé).
- **Accessibilité (ARIA)** et focus visibles.
- **Interactions fluides et animations légères (framer-motion)**.
- **Mock data fournie** (pour preview des images, segments, calendriers, etc.).
- **Support IA intégré** (génération de texte/image via mock d’API `aiGenerator()`).

## ⚙️ DESCRIPTION DÉTAILLÉE DES ÉTAPES

1️⃣ StepCreatives.tsx — Créatifs

- Sous-sections :
  - Upload image/vidéo (via `shadcn/ui` `FileUploader` ou `Dropzone` custom).
  - Génération IA de texte ou visuel (`aiGenerator(prompt)` dans `utils/ai-generator.ts`).
  - Champs : `headline`, `caption`, `mediaFiles[]`.
- Features :
  - Preview visuelle du post (mobile + desktop mock).
  - Option “Générer par IA” → ouvre un `Dialog` shadcn avec prompt input et bouton “Générer”.
  - Gestion drag/drop réordonner les visuels.
  - Validation zod : au moins 1 média + titre non vide.

---

2️⃣ StepAudience.tsx — Ciblage et segments

- UI :
  - Segments prédéfinis (cartes avec `shadcn/ui` `Card` + `Switch` “Activer”).
  - Création manuelle : filtres “Âge”, “Localisation”, “Centre d’intérêt”.
  - Import CSV (mock, affiche prévisualisation).
- Logic :
  - Mock data importée depuis `campaign-create.mock.ts` (segments existants).
  - Validation zod : au moins un segment sélectionné.
  - Bouton “Enregistrer le segment” → animation succès + toast.
- Composants : `SegmentCard`, `SegmentFilters`, `CsvPreviewTable`.

---

3️⃣ StepPlanning.tsx — Budget et calendrier

- UI :
  - Composants : `DatePicker` (shadcn), `Slider` pour budget, `Select` pour devise, `Switch` “Budget quotidien”.
  - Affiche calcul estimé du reach (mock calcul).
- Logic :
  - Validation : `startDate < endDate`, `budget > 0`.
  - Interaction : modif budget → recalcul reach instantané.
  - Mock formule : `reach = budget * 0.45 * random(1.1,1.3)`.

---

4️⃣ StepTracking.tsx — UTM & A/B Tests

- UI :
  - Section “UTM Builder” : inputs pour source, medium, campaign, content.
  - Bouton “Générer lien” (affiche preview : `https://ai4local.com/?utm_source=...`).
  - Section “A/B Test” : toggle activé → table pour variants avec %
  - Graphique petit (bar chart `shadcn/ui` composable).
- Logic :
  - Validation zod : champs non vides si A/B actif, pourcentage total = 100%.
  - Mock preview chart : CTR variant A vs B.

5️⃣ StepValidation.tsx — Vérification finale

- UI :
  - Récapitulatif de toutes les étapes :
    - Créatifs (miniature + texte)
    - Audience (segments actifs)
    - Planning (dates, budget, reach estimé)
    - Tracking (UTM + variants).
  - Check-list shadcn `Checkbox` : “Visuel conforme”, “Budget validé”, “Audience OK”, etc.
  - Boutons : “Sauvegarder le brouillon”, “Publier maintenant”.
- Logic :
  - Validation : tous les items cochés avant publication.
  - Animation succès (`Dialog` ou `Toast` shadcn) après publication mock.
    🧠 TECHNIQUES ET BONNES PRATIQUES
    -Composants petits et réutilisables.
    -Export index.ts dans chaque sous-dossier.
    -Typage zod et réutilisation entre étapes.
    -useCampaignCreateContext() pour stocker l’état global du wizard.
    -State persistant (draft auto-save).
    -Test unitaire exemple pour StepCreatives (upload + validation).
    -Responsive sur tous les breakpoints.
    -framer-motion pour transitions entre étapes.
    -Commentaires clairs en haut de chaque fichier.
    📄 LIVRABLES ATTENDUS
- Fichiers TSX/TS complets dans l’arborescence correspondante.
  -README.md (comment intégrer et connecter à API réelle).
  -validators.ts (Zod schemas pour chaque étape).
  -StepsExample.tsx (monte le wizard complet avec mocks).
  -Test exemple StepCreatives.test.tsx.
  -Code propre, lisible, typé, prêt à refactor.
  -Suivre le même design et logique de la page Realtime.

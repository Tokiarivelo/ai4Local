name: 🚀 CI/CD AI4Local

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: gcr.io
  PROJECT_ID: ai4local-prod

jobs:
  # Job de linting et tests
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: 📋 Install dependencies
        run: |
          bun install
          cd services/ml-service && pip install -r requirements.txt

      - name: 🔍 Lint TypeScript
        run: bun run lint

      - name: 🔍 Lint Python
        run: |
          cd services/ml-service
          black --check src/
          flake8 src/

      - name: 🔍 Lint Rust
        run: |
          cd services/ai-content-service
          cargo fmt -- --check
          cargo clippy -- -D warnings

      - name: 🧪 Test TypeScript
        run: bun run test

      - name: 🧪 Test Rust
        run: |
          cd services/ai-content-service
          cargo test

      - name: 🧪 Test Python
        run: |
          cd services/ml-service
          pytest

  # Job de build des images Docker
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    strategy:
      matrix:
        service: [api-gateway, ai-content-service, ml-service, web]

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🐳 Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: 🏗️ Build Docker image
        run: |
          if [ "${{ matrix.service }}" = "web" ]; then
            CONTEXT="apps/web"
          else
            CONTEXT="services/${{ matrix.service }}"
          fi

          docker build -t $REGISTRY/$PROJECT_ID/${{ matrix.service }}:$GITHUB_SHA \
                       -t $REGISTRY/$PROJECT_ID/${{ matrix.service }}:latest \
                       $CONTEXT

      - name: 📤 Push Docker image
        run: |
          docker push $REGISTRY/$PROJECT_ID/${{ matrix.service }}:$GITHUB_SHA
          docker push $REGISTRY/$PROJECT_ID/${{ matrix.service }}:latest

  # Job de déploiement staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: ☸️ Get GKE credentials
        run: |
          gcloud container clusters get-credentials ai4local-staging \
            --zone us-central1-a --project $PROJECT_ID

      - name: 📦 Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 🚀 Deploy with Helm
        run: |
          helm upgrade --install ai4local-staging infra/helm/ai4local \
            --namespace ai4local-staging \
            --create-namespace \
            --set image.tag=$GITHUB_SHA \
            --set env.NODE_ENV=staging \
            --values infra/helm/ai4local/values-staging.yaml \
            --wait

      - name: ✅ Verify deployment
        run: |
          kubectl rollout status deployment/ai4local-api-gateway -n ai4local-staging
          kubectl rollout status deployment/ai4local-web -n ai4local-staging

  # Job de déploiement production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🔧 Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: ☸️ Get GKE credentials
        run: |
          gcloud container clusters get-credentials ai4local-prod \
            --zone us-central1-a --project $PROJECT_ID

      - name: 📦 Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 🚀 Deploy with Helm
        run: |
          helm upgrade --install ai4local infra/helm/ai4local \
            --namespace ai4local \
            --create-namespace \
            --set image.tag=$GITHUB_SHA \
            --set env.NODE_ENV=production \
            --values infra/helm/ai4local/values-prod.yaml \
            --wait

      - name: ✅ Verify deployment
        run: |
          kubectl rollout status deployment/ai4local-api-gateway -n ai4local
          kubectl rollout status deployment/ai4local-web -n ai4local

      - name: 🔔 Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🚀 AI4Local déployé en production ! Version: ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  # Job de tests E2E post-déploiement
  e2e-tests:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📋 Install dependencies
        run: bun install

      - name: 🧪 Run E2E tests
        run: |
          export E2E_BASE_URL=https://staging.ai4local.mg
          bun run test:e2e
        env:
          E2E_BASE_URL: https://staging.ai4local.mg
          E2E_API_URL: https://api-staging.ai4local.mg

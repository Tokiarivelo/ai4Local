/**
 * Utilitaires pour la g√©n√©ration IA de contenu
 * Mock API pour simulation de g√©n√©ration de texte et d'images
 */

import { useState } from 'react';

// Types pour les requ√™tes IA
export interface AITextRequest {
  prompt: string;
  type: 'headline' | 'caption' | 'cta';
  tone?: 'professional' | 'casual' | 'exciting' | 'urgent';
  length?: 'short' | 'medium' | 'long';
}

export interface AIImageRequest {
  prompt: string;
  style?: 'photo' | 'illustration' | 'graphic' | 'minimalist';
  size?: '1:1' | '16:9' | '9:16' | '4:5';
  color?: 'colorful' | 'monochrome' | 'brand';
}

export interface AIResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  credits_used?: number;
}

// Mock de g√©n√©ration de texte
export async function generateText(request: AITextRequest): Promise<AIResponse<string>> {
  // Simulation d'un d√©lai d'API
  await new Promise((resolve) => setTimeout(resolve, 1500 + Math.random() * 1000));

  const mockTexts = {
    headline: [
      'üéØ D√©couvrez nos offres exclusives !',
      '‚ú® Innovation et performance r√©unies',
      'üöÄ Transformez votre quotidien',
      'üí° La solution que vous attendiez',
      'üåü Excellence et qualit√© garanties',
    ],
    caption: [
      'Rejoignez des milliers de clients satisfaits qui ont d√©j√† fait confiance √† notre expertise. D√©couvrez pourquoi nous sommes le choix pr√©f√©r√© des professionnels.',
      "Une nouvelle √®re commence avec nos solutions innovantes. Profitez d'une exp√©rience unique et personnalis√©e selon vos besoins sp√©cifiques.",
      "Optimisez votre productivit√© avec nos outils derni√®re g√©n√©ration. Simple, efficace et accessible √† tous les niveaux d'expertise.",
    ],
    cta: [
      'D√©couvrir maintenant',
      "Profiter de l'offre",
      'Commencer gratuitement',
      'En savoir plus',
      'R√©server ma place',
    ],
  };

  const texts = mockTexts[request.type] || mockTexts.headline;
  const randomText = texts[Math.floor(Math.random() * texts.length)];

  // Simulation d'√©chec occasionnel
  if (Math.random() < 0.1) {
    return {
      success: false,
      error: 'Limite de g√©n√©ration atteinte. R√©essayez dans quelques minutes.',
    };
  }

  return {
    success: true,
    data: randomText,
    credits_used: 1,
  };
}

// Mock de g√©n√©ration d'image
export async function generateImage(request: AIImageRequest): Promise<AIResponse<string>> {
  // Simulation d'un d√©lai d'API plus long pour les images
  await new Promise((resolve) => setTimeout(resolve, 3000 + Math.random() * 2000));

  // URLs d'images de d√©monstration (Unsplash)
  const mockImages = [
    'https://images.unsplash.com/photo-1661956602116-aa6865609028?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1661956602868-6ae368943878?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1661956603025-8310b2e2e5b8?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1661956603117-230f169ce8ea?w=800&h=600&fit=crop',
    'https://images.unsplash.com/photo-1661956603394-0d4c5ee4a929?w=800&h=600&fit=crop',
  ];

  const randomImage = mockImages[Math.floor(Math.random() * mockImages.length)];

  // Simulation d'√©chec occasionnel
  if (Math.random() < 0.15) {
    return {
      success: false,
      error: "Erreur lors de la g√©n√©ration de l'image. Veuillez modifier votre prompt.",
    };
  }

  return {
    success: true,
    data: randomImage,
    credits_used: 3,
  };
}

// Fonction g√©n√©rique pour la g√©n√©ration IA
export async function aiGenerator<T>(
  type: 'text' | 'image',
  request: AITextRequest | AIImageRequest
): Promise<AIResponse<T>> {
  if (type === 'text') {
    return generateText(request as AITextRequest) as Promise<AIResponse<T>>;
  } else {
    return generateImage(request as AIImageRequest) as Promise<AIResponse<T>>;
  }
}

// Hook pour suivre les cr√©dits IA
export function useAICredits() {
  const [credits, setCredits] = useState(50); // Cr√©dits initiaux
  const [isLoading, setIsLoading] = useState(false);

  const useCredits = (amount: number) => {
    setCredits((prev: number) => Math.max(0, prev - amount));
  };

  const canUseCredits = (amount: number) => {
    return credits >= amount;
  };

  return {
    credits,
    isLoading,
    setIsLoading,
    useCredits,
    canUseCredits,
  };
}

// Utilitaires pour formater les prompts
export function formatPromptForHeadline(
  product: string,
  audience: string,
  tone: string = 'professional'
): string {
  return `Cr√©er un titre accrocheur pour ${product} destin√© √† ${audience} avec un ton ${tone}`;
}

export function formatPromptForImage(
  concept: string,
  style: string = 'photo',
  mood: string = 'modern'
): string {
  return `${concept}, style ${style}, ambiance ${mood}, haute qualit√©, professionnel`;
}
